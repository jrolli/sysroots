name: Build & Release Sysroots
on:
 workflow_dispatch:
 push:
   tags: 'v*'
jobs:
  generate-sysroots:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        toolchain_target:
          [
            x86_64-linux-glibc2.28,
            x86_64-linux-glibc2.17,
            i686-linux-glibc2.17,
            aarch64-linux-glibc2.17,
            armv7hl-linux-glibc2.17,
            powerpc64-linux-glibc2.17,
            powerpc64le-linux-glibc2.17,
            x86_64-linux-musl,
            i386-linux-musl,
            aarch64-linux-musl,
            armv7-linux-musl,
            mips-linux-musl,
            mipsel-linux-musl,
            mips64-linux-musl,
            mips64el-linux-musl,
            powerpc-linux-musl,
            powerpc64-linux-musl,
            powerpc64le-linux-musl,
          ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install build tool
        run: |
          sudo apt-get update
          sudo apt-get install clang llvm python3 python3-pip ninja-build cmake
      - name: Fetch dependencies
        run: |
          git clone --single-branch --branch=v5.4.290       --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git ../linux
          git clone --single-branch --branch=v1.2.5         --depth=1 https://git.musl-libc.org/git/musl    ../musl
          git clone --single-branch --branch=llvmorg-20.1.8 --depth=1 https://github.com/llvm/llvm-project  ../llvm-project
      - name: Build
        run: ./generate.sh ${{ matrix.toolchain_target }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.toolchain_target }}.tar.xz
          path: ${{ matrix.toolchain_target }}.tar.xz
          retention-days: 7
          compression-level: 0
      - name: Prep toolchain
        if: endsWith(matrix.toolchain_target, '-glibc2.28')
        run: |
          tar xf ${{ matrix.toolchain_target }}.tar.xz
      - name: Build LLVM
        if: endsWith(matrix.toolchain_target, '-glibc2.28')
        run: LLVM_SRC_DIR=../llvm-project ./gen-clang.sh ${{ matrix.toolchain_target }}
      - name: Upload LLVM
        if: endsWith(matrix.toolchain_target, '-glibc2.28')
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ matrix.toolchain_target }}.tar.xz
          path: llvm-${{ matrix.toolchain_target }}.tar.xz
          retention-days: 7
          compression-level: 0
  generate-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: generate-sysroots
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Gather artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*.tar.xz"
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: "LLVM + Clang v20.1.8\nLinux kernel v6.9\nmusl v1.2.5"
          files: artifacts/*.tar.xz
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push container
        uses: docker/build-push-action@v6
        with:
          context: artifacts
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
