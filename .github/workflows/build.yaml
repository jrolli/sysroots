name: Build & Release Sysroots
on:
 workflow_dispatch:
 push:
   tags: 'v*'
jobs:
  generate-sysroots:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        toolchain_target:
          [
            x86_64-linux-glibc2.28,
            x86_64-linux-glibc2.17,
            i686-linux-glibc2.17,
            aarch64-linux-glibc2.17,
            armv7hl-linux-glibc2.17,
            powerpc64-linux-glibc2.17,
            powerpc64le-linux-glibc2.17,
            x86_64-linux-musl,
            i386-linux-musl,
            aarch64-linux-musl,
            armv7-linux-musl,
            mips-linux-musl,
            mipsel-linux-musl,
            mips64-linux-musl,
            mips64el-linux-musl,
            powerpc-linux-musl,
            powerpc64-linux-musl,
            powerpc64le-linux-musl,
          ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install build tool
        run: |
          sudo apt-get update
          sudo apt-get install clang llvm python3 python3-pip ninja-build cmake
      - name: Fetch dependencies
        run: |
          git clone --single-branch --branch=v6.9           --depth=1 https://github.com/torvalds/linux.git ../linux
          git clone --single-branch --branch=v1.2.5         --depth=1 https://git.musl-libc.org/git/musl    ../musl
          git clone --single-branch --branch=llvmorg-18.1.8 --depth=1 https://github.com/llvm/llvm-project  ../llvm-project
      - name: Build
        run: ./generate.sh ${{ matrix.toolchain_target }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.toolchain_target }}.tar.xz
          path: ${{ matrix.toolchain_target }}.tar.xz
          retention-days: 7
          compression-level: 0
      - name: Build LLVM
        if: endsWith(matrix.toolchain_target, '-glibc2.28')
        run: |
          tar xf ${{ matrix.toolchain_target }}.tar.xz
          cmake -B build-clang \
                -S ../llvm-project/llvm \
                -G Ninja \
                --toolchain=`pwd`/${{ matrix.toolchain_target}}/toolchain.cmake \
                -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" \
                -DLLVM_INCLUDE_BENCHMARKS=OFF \
                -DLLVM_INCLUDE_EXAMPLES=OFF \
                -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;BPF;LoongArch;Mips;PowerPC;RISCV;Sparc;WebAssembly;X86" \
                -DCMAKE_INSTALL_PREFIX="/" \
                -DCMAKE_BUILD_TYPE=MinSizeRel \
                -DLLVM_ENABLE_LIBCXX=ON \
                -DHAVE_CXX_ATOMICS_WITHOUT_LIB=ON \
                -DHAVE_CXX_ATOMICS64_WITHOUT_LIB=ON \
                -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
                -DLLVM_BUILD_LLVM_DYLIB=ON \
                -DLLVM_ENABLE_UNWIND_TABLES=OFF \
                -DLLVM_LINK_LLVM_DYLIB=ON
          cmake --build build-clang
          DESTDIR=../llvm-${{ matrix.toolchain_target }} cmake --build build-clang --target install
          tar cJvf llvm-${{ matrix.toolchain_target }}.tar.xz llvm-${{ matrix.toolchain_target }}
      - name: Upload LLVM
        if: endsWith(matrix.toolchain_target, '-glibc2.28')
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ matrix.toolchain_target }}.tar.xz
          path: llvm-${{ matrix.toolchain_target }}.tar.xz
          retention-days: 7
          compression-level: 0
  generate-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: generate-sysroots
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Gather artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*.tar.xz"
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: "LLVM + Clang v18.1.8\nLinux kernel v6.9\nmusl v1.2.5"
          files: artifacts/*.tar.xz
